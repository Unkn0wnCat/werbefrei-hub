---
import Layout from "../../layouts/Layout.astro";
import i18next, { t, changeLanguage } from "i18next";
import type { Initiative } from "../../models/initiative.types";
import { Globe2 } from "lucide";
import Icon from "../../components/Icon.astro";
import { Trans } from "astro-i18next/components";

changeLanguage("en");

const initiatives = await Astro.glob<Initiative>("../../../data/initiativen/*.json");
---

<Layout title={t("site.title")}>
	<main>
		<h1>{t("site.title")}</h1>

		<div>
			{t("home.explanation", {returnObjects: true}).map((text: string) => {
				return <p>{text}</p>
			})}
		</div>

		<h2 id="initiativen">{t("home.initiatives")}</h2>

		<div class="list">
			{
				initiatives.map(async (initiative) => {
					const labels = await (await fetch(`https://www.wikidata.org/w/rest.php/wikibase/v0/entities/items/${initiative.region.wikidata}/labels`)).json()
					const url = new URL(initiative.url)

					return <div class="entry">
						<span class="region">{labels[i18next.language]||labels["de"]||labels["en"]||"???"}</span>
						<span class="name">{initiative.name}</span>
						<span class="link"><Icon icon={Globe2}/><a href={initiative.url}>{url.host}</a></span>

						{initiative.cta && <div class="cta">
							<span class="title">{t(`cta.${initiative.cta.i18nKey}.title`)}</span>
							<p>{t(`cta.${initiative.cta.i18nKey}.text`, {replace: {"initiative_name": initiative.name}})}</p>
							<a href={initiative.cta.url}>
								{
									t(`cta.${initiative.cta.i18nKey}.button`)
								}
							</a>
						</div>}
					</div>
				})
			}
			<div class="entry cta_add_missing">
				<span class="name">{t("home.missing.title")}</span>

				<p>
					<Trans i18nKey={"home.missing.text"}><a href="https://github.com/Unkn0wnCat/werbefrei-hub" target="_blank" rel="noreferer" /></Trans>
				</p>
			</div>
		</div>
	</main>
</Layout>

<style lang="scss">
	main {
		display: grid;
		max-width: 100vw;
		overflow: hidden;
		grid-template-columns: 
			[full-start] minmax(max(4vmin,var(--gap)),auto) 
			[wide-start] minmax(auto,240px) 
			[main-start] min(var(--layout-width),100% - max(8vmin,var(--gap) * 2)) 
			[main-end] minmax(auto,240px) 
			[wide-end] minmax(max(4vmin,var(--gap)),auto) 
			[full-end];
		padding: var(--gap);
		gap: var(--gap) 0;

		> :global(*) {
			grid-column: main-start/main-end;
		}
	}
	h1 {
		font-size: 3.5em;
		font-weight: 800;
		margin: 0;
	}
	h2 {
		font-size: 2.5em;
		font-weight: 600;
		margin: 0;
	}

	.list {
		display: flex;
		flex-direction: column;
		gap: var(--gap);
		grid-column: wide-start/wide-end;

		.entry {
			border: 1px solid rgba(100, 100, 100, .5);
			padding: var(--padding);
			border-radius: var(--border-radius);

			display: flex;
			flex-direction: column;

			&.cta_add_missing {
				border-style: dashed;
			}

			.region {
				font-weight: 600;
				opacity: .5;
			}

			.name {
				font-size: 2em;
				font-weight: 700;
			}

			.link {
				display: flex;
				justify-content: flex-start;
				align-items: center;
				gap: calc(var(--gap) / 2);
				margin-top: calc(var(--gap) / 2);

				> a {
					color: inherit;
					text-decoration: underline dotted currentColor;
				}
			}

			.cta {
				display: flex;
				flex-direction: column;
				border: 1px solid rgba(100, 100, 100, .25);
				padding: var(--padding);
				border-radius: var(--border-radius);
				margin-top: calc(var(--gap));

				.title {
					font-size: 1.5em;
				}

				a {
					color: white;
					background-color: black;
					text-decoration: none;
					//color: black;
					//border: 2px solid black;
					//text-decoration: underline dotted currentColor;
					width: fit-content;
					padding: calc(var(--padding) / 2) var(--padding);
					border-radius: var(--border-radius);
				}
			}
		}
	}
</style>
